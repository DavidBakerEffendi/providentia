# JanusGraph configuration sample: Cassandra & Elasticsearch over sockets
#
# To see configuration reference go to:
# https://docs.janusgraph.org/0.1.0/config-ref.html

gremlin.graph=org.janusgraph.core.JanusGraphFactory

# Config for Cassandra
storage.backend=cql
storage.hostname=127.0.0.1
storage.directory=/var/lib/janusgraph/data
storage.batch-loading=true
storage.buffer-size=10000
storage.index.search.local-mode=true
storage.cassandra.write-consistency-level=QUORUM
storage.cassandra.keyspace=janusgraph

# Configure cache
cache.db-cache = true
cache.db-cache-clean-wait = 20
cache.db-cache-time = 180000
cache.db-cache-size = 0.50

# Configure Elastic Search
index.search.backend=elasticsearch
index.search.hostname=127.0.0.1
index.default.directory=/var/lib/janusgraph/index

# Starting from a clean graph? This should be true if you are importing for the first time, false if you restarting the
# import_tool and would like to check for existence of vertices and edges to avoid duplicates
import.load-schema=false

# Max number of processed lines before committing the transaction. This is kept fairly low to prevent ghost vertices/edges
# being created. Once can play with this setting to find optimal balance where self-dependent data is not affected, e.g.
# businesses.
import.queue-size=100

# The sector size of the file being read where a sector defines a fraction of the datafile. The way this is used is that
# if records read exceed the size of the current sector in which number of records processed lie then the tool stops
# creating new jobs to prevent GC memory overflow.
import.sector-size=0.05

# This lets the import tool know what percentage of data you would like to import_tool. This is important if you have less than
# 16GB RAM available.
import.data.percentage=0.05
